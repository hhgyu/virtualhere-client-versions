name: Get VirtualHere Client versions
on:
  schedule:
    - cron: "0 3,15 * * *"
  workflow_dispatch:

defaults:
  run:
    shell: pwsh

jobs:
  find_new_versions:
    name: Find new versions
    runs-on: ubuntu-latest
    permissions:
      actions: write
    outputs:
      new_version_output: ${{ steps.get_new_versions.outputs.NEW_VERSION }}
      versions_info_output: ${{ steps.get_new_versions.outputs.VERSIONS_INFO }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: true

      - id: get_new_versions
        name: Get new versions
        run: ./scripts/find-new-version.ps1 -RepositoryFullName "$env:GITHUB_REPOSITORY"

      - id: check_new_version
        name: Check New Version
        run: |
          if("${{ steps.get_new_versions.outputs.NEW_VERSION }}" -eq '') {
            Write-Host "skip!"

            Import-Module "./helpers/github/github-api.psm1"
            $gitHubApi = Get-GitHubApi -RepositoryFullName "$env:GITHUB_REPOSITORY" `
                                        -AccessToken "${{ secrets.GITHUB_TOKEN }}"
            $gitHubApi.CancelWorkflow("$env:GITHUB_RUN_ID")
          }

  download_and_publish_release:
    name: Download & Publish Release
    runs-on: ubuntu-latest
    needs: find_new_versions
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: true

      - id: download_version
        name: Download Version And Create Release Body
        if: env.NEW_VERSION != '' && env.VERSIONS_INFO != ''
        run: ./scripts/download-new-version.ps1
        env:
          NEW_VERSION: ${{ needs.find_new_versions.outputs.new_version_output }}
          VERSIONS_INFO: ${{ needs.find_new_versions.outputs.versions_info_output }}

      - name: Publish Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.find_new_versions.outputs.new_version_output }}-${{ github.run_id }}
          name: ${{ needs.find_new_versions.outputs.new_version_output }}
          body: ${{ steps.download_version.outputs.CHANGE_LOG }}
          artifacts: artifact/*
          prerelease: false

  trigger_pr:
    name: Trigger "Create Pull Request" workflow
    needs: download_and_publish_release
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
    - name: Trigger "Create Pull Request" workflow
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'create-pr.yml',
            ref: 'main'
          });
